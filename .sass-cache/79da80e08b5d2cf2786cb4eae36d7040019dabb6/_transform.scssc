3.1.8 (Brainy Betty)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:
@linei:@has_childrenT:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@options{ :@children[io:Sass::Tree::ImportNode
;i;0;	@;
[ :@imported_filename"sharedo:Sass::Tree::CommentNode;i:@silenti :@lines[ ;	@;
[ :
@loud0:@value"/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */o;;i;i ;[ ;	@;
[ ;0;"¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */o;;i;i ;[ ;	@;
[ ;0;"Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */o;;i ;i ;[ ;	@;
[ ;0;"p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */o;;i4;i ;[ ;	@;
[ ;0;"a/* Defaults ------------------------------------------------------------------
 * @doc on */o;;i7;i ;[ ;	@;
[ ;0;"./* The default x-origin for transforms */o:Sass::Tree::VariableNode;i8:
@name"default-origin-x:@guarded"!default;	@;
[ :
@expro:Sass::Script::Number;i8:@numerator_units["%:@original"50%;	@:@denominator_units[ ;i7o;;i9;i ;[ ;	@;
[ ;0;"./* The default y-origin for transforms */o;;i:;"default-origin-y;"!default;	@;
[ ;o;;i:;["%;"50%;	@;[ ;i7o;;i;;i ;[ ;	@;
[ ;0;"./* The default z-origin for transforms */o;;i<;"default-origin-z;"!default;	@;
[ ;o;;i<;["%;"50%;	@;[ ;i7o;;i?;i ;[ ;	@;
[ ;0;"//* The default x-multiplier for scaling */o;;i@;"default-scale-x;"!default;	@;
[ ;o;;i@;[ ;"	1.25;	@;[ ;f	1.25o;;iA;i ;[ ;	@;
[ ;0;"//* The default y-multiplier for scaling */o;;iB;"default-scale-y;"!default;	@;
[ ;o:Sass::Script::Variable	;iB:@underscored_name"default_scale_x;"default-scale-x;	@o;;iC;i ;[ ;	@;
[ ;0;"//* The default z-multiplier for scaling */o;;iD;"default-scale-z;"!default;	@;
[ ;o;	;iD;"default_scale_x;"default-scale-x;	@o;;iG;i ;[ ;	@;
[ ;0;"*/* The default angle for rotations */o;;iH;"default-rotate;"!default;	@;
[ ;o;;iH;["deg;"
45deg;	@;[ ;i2o;;iK;i ;[ ;	@;
[ ;0;"</* The default x-vector for the axis of 3d rotations */o;;iL;"default-vector-x;"!default;	@;
[ ;o;;iL;[ ;"1;	@;@R;io;;iM;i ;[ ;	@;
[ ;0;"</* The default y-vector for the axis of 3d rotations */o;;iN;"default-vector-y;"!default;	@;
[ ;o;;iN;[ ;"1;	@;@R;io;;iO;i ;[ ;	@;
[ ;0;"</* The default z-vector for the axis of 3d rotations */o;;iP;"default-vector-z;"!default;	@;
[ ;o;;iP;[ ;"1;	@;@R;io;;iS;i ;[ ;	@;
[ ;0;"0/* The default x-length for translations */o;;iT;"default-translate-x;"!default;	@;
[ ;o;;iT;["em;"1em;	@;[ ;io;;iU;i ;[ ;	@;
[ ;0;"0/* The default y-length for translations */o;;iV;"default-translate-y;"!default;	@;
[ ;o;	;iV;"default_translate_x;"default-translate-x;	@o;;iW;i ;[ ;	@;
[ ;0;"0/* The default z-length for translations */o;;iX;"default-translate-z;"!default;	@;
[ ;o;	;iX;"default_translate_x;"default-translate-x;	@o;;i[;i ;[ ;	@;
[ ;0;"*/* The default x-angle for skewing */o;;i\;"default-skew-x;"!default;	@;
[ ;o;;i\;["deg;"	5deg;	@;[ ;i
o;;i];i ;[ ;	@;
[ ;0;"*/* The default y-angle for skewing */o;;i^;"default-skew-y;"!default;	@;
[ ;o;;i^;["deg;"	5deg;	@;[ ;i
o;;ia;i ;[ ;	@;
[ ;0;"/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */o:Sass::Tree::MixinDefNode;il;T:
@args[[o;;"origin;"origin;	@0[o;;"only3d;"only3d;	@0;"apply-origin;	@;
[o;;im;"only3d;0;	@;
[ ;o:Sass::Script::Operation
;im:@operand2o;
;im;o;;im;[ ;"2;	@;@R;i:@operator:gt:@operand1o:Sass::Script::Funcall
;im;[o;#
;im;[o;	;im;"origin;"origin;	@;"-compass-list;	@:@keywords{ ;"-compass-list-size;	@;${ ;	@; :or;"o;	;im;"only3d;"only3d;	@;	@u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@linein:@underscored_name"only3d:
@name"only3d:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@lineiu:
@args[o:Sass::Script::String	;is:@options{ :
@type:identifier:@value"transform-origino:Sass::Script::Variable	;is:@underscored_name"origin:
@name"origin;	@
o;	;it;	@
;
;;"	-mozo;	;it;	@
;
;;"-webkito;	;it;	@
;
;;"-oo;	;it;	@
;
;;"-mso:!Sass::Script::UnaryOperation	;it:@operator:not;	@
:@operando;	;it;	@
;
;;"-khtmlo;	;it;	@
;
;;"official;"experimental;	@
:@children[ :@keywords{ [o:Sass::Tree::MixinNode;iq:
@args[o:Sass::Script::String	;io;	@	:
@type:identifier:@value"transform-origino; 	;io;"origin;"origin;	@	o:!Sass::Script::UnaryOperation	;ip:@operator:not;	@	:@operando;	;ip;	@	;;;"	-mozo;	;ip;	@	;;;"-webkito;	;ip;;;	@	;o;	;ip;	@	;;;"-oo;	;ip;;;	@	;o;	;ip;	@	;;;"-mso;	;ip;;;	@	;o;	;ip;	@	;;;"-khtmlo;	;ip;	@	;;;"official;"experimental;	@	:@children[ :@keywords{ o;;iy;i ;[ ;	@;
[ ;0;"#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */o;;i;T;[	[o;;"origin_x;"origin-x;	@o;	;i|;"default_origin_x;"default-origin-x;	@[o;;"origin_y;"origin-y;	@o;	;i};"default_origin_y;"default-origin-y;	@[o;;"origin_z;"origin-z;	@o:Sass::Script::Bool;i~;	@;F[o;;"only3d;"only3d;	@o;#
;i;[o;	;i;"origin_z;"origin-z;	@o;';i;	@;To;';i;	@;F;"if;	@;${ ;"transform-origin;	@;
[o;;i;"origin;0;	@;
[ ;o;#
;i;[o:Sass::Script::String	;i;	@:
@type:string;" ;"unquote;	@;${ u;&[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	;i:@underscored_name"origin_z:
@name"origin-z:@options{ :@operator:or:@operand1o; 
;i;o;	;i;	"origin_y;
"origin-y;@
;;;o;	;i;	"origin_x;
"origin-x;@
;@
;@
0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_x:
@name"origin-x:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@linei:
@name"origin:@guarded0:@options{ :@children[ :
@expro:Sass::Script::Number;i:@numerator_units["%:@original"50%;	@	:@denominator_units[ :@valuei7[o:Sass::Tree::VariableNode;i;"origin:@guarded0;	@	:@children[ :
@expro; 	;i;"origin_x;"origin-x;	@	u;Þ[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_y:
@name"origin-y:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:
@name"origin-z:@options{ 0[o:Sass::Tree::VariableNode;i;"origin:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o; 	;i;"origin;"origin;	@	o:Sass::Script::Number;i:@numerator_units["%:@original"50%;	@	:@denominator_units[ ;i7[o:Sass::Tree::VariableNode;i;"origin:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin_y;"origin-y;	@	u;5[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:
@name"origin-z:@options{ 0[o:Sass::Tree::VariableNode;i;"origin:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin_z;"origin-z;	@	o:Sass::Tree::MixinNode;i:
@args[o;	;i;	"origin;
"origin;@
o;	;i;	"only3d;
"only3d;@
;
"apply-origin;@
:@children[ :@keywords{ o;;i;i ;[ ;	@;
[ ;0;"¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */o;;i;T;[[o;;"transform;"transform;	@0[o;;"only3d;"only3d;	@o;';i;	@;F;"transform;	@;
[u;&6[o:Sass::Script::Variable	:
@linei:@underscored_name"only3d:
@name"only3d:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@linei:
@args[o:Sass::Script::String	;i:@options{ :
@type:identifier:@value"transformo:Sass::Script::Variable	;i:@underscored_name"transform:
@name"transform;	@
o;	;i;	@
;
;;"	-mozo;	;i;	@
;
;;"-webkito;	;i;	@
;
;;"-oo;	;i;	@
;
;;"-mso:!Sass::Script::UnaryOperation	;i:@operator:not;	@
:@operando;	;i;	@
;
;;"-khtmlo;	;i;	@
;
;;"official;"experimental;	@
:@children[ :@keywords{ [o:Sass::Tree::MixinNode;i:
@args[o:Sass::Script::String	;i;	@	:
@type:identifier:@value"transformo; 	;i;"transform;"transform;	@	o:!Sass::Script::UnaryOperation	;i:@operator:not;	@	:@operando;	;i;	@	;;;"	-mozo;	;i;	@	;;;"-webkito;	;i;;;	@	;o;	;i;	@	;;;"-oo;	;i;;;	@	;o;	;i;	@	;;;"-mso;	;i;;;	@	;o;	;i;	@	;;;"-khtmlo;	;i;	@	;;;"official;"experimental;	@	:@children[ :@keywords{ o;;i;i ;[ ;	@;
[ ;0;"D/* Shortcut to target all browsers with 2D transform support */o;;i ;T;[[o;;"
trans;"
trans;	@0;"transform2d;	@;
[o:Sass::Tree::MixinNode;i¡;[o;	;i¡;"
trans;"
trans;	@o;';i¡;	@;F;"transform;	@;
[ ;${ o;;i¤;i ;[ ;	@;
[ ;0;"E/* Shortcut to target only browsers with 3D transform support */o;;i¥;T;[[o;;"
trans;"
trans;	@0;"transform3d;	@;
[o;+;i¦;[o;	;i¦;"
trans;"
trans;	@o;';i¦;	@;T;"transform;	@;
[ ;${ o;;i©;i ;[ ;	@;
[ ;0;"m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */o;;i­;i ;[ ;	@;
[ ;0;"`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */o;;i´;T;[[o;;"p;"p;	@0;"perspective;	@;
[o;+;i·;[o;(	;iµ;	@;):identifier;"perspectiveo;	;iµ;"p;"p;	@o:!Sass::Script::UnaryOperation	;i¶; :not;	@:@operando;(	;i¶;	@;);,;"	-mozo;(	;i¶;	@;);,;"-webkito;-	;i¶; ;.;	@;/o;(	;i¶;	@;);,;"-oo;-	;i¶; ;.;	@;/o;(	;i¶;	@;);,;"-mso;-	;i¶; ;.;	@;/o;(	;i¶;	@;);,;"-khtmlo;(	;i¶;	@;);,;"official;"experimental;	@;
[ ;${ o;;iº;i ;[ ;	@;
[ ;0;"¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */o;;i¿;T;[[o;;"origin;"origin;	@o;;i¿;["%;"50%;	@;[ ;i7;"perspective-origin;	@;
[o;+;iÂ;[o;(	;iÀ;	@;);,;"perspective-origino;	;iÀ;"origin;"origin;	@o;-	;iÁ; ;.;	@;/o;(	;iÁ;	@;);,;"	-mozo;(	;iÁ;	@;);,;"-webkito;-	;iÁ; ;.;	@;/o;(	;iÁ;	@;);,;"-oo;-	;iÁ; ;.;	@;/o;(	;iÁ;	@;);,;"-mso;-	;iÁ; ;.;	@;/o;(	;iÁ;	@;);,;"-khtmlo;(	;iÁ;	@;);,;"official;"experimental;	@;
[ ;${ o;;iÅ;i ;[ ;	@;
[ ;0;"÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */o;;iË;T;[[o;;"
style;"
style;	@o;(	;iË;	@;);,;"preserve-3d;"transform-style;	@;
[o;+;iÎ;[o;(	;iÌ;	@;);,;"transform-styleo;	;iÌ;"
style;"
style;	@o;-	;iÍ; ;.;	@;/o;(	;iÍ;	@;);,;"	-mozo;(	;iÍ;	@;);,;"-webkito;-	;iÍ; ;.;	@;/o;(	;iÍ;	@;);,;"-oo;-	;iÍ; ;.;	@;/o;(	;iÍ;	@;);,;"-mso;-	;iÍ; ;.;	@;/o;(	;iÍ;	@;);,;"-khtmlo;(	;iÍ;	@;);,;"official;"experimental;	@;
[ ;${ o;;iÑ;i ;[ ;	@;
[ ;0;"ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */o;;i×;T;[[o;;"visibility;"visibility;	@o;(	;i×;	@;);,;"hidden;"backface-visibility;	@;
[o;+;iÚ;[o;(	;iØ;	@;);,;"backface-visibilityo;	;iØ;"visibility;"visibility;	@o;-	;iÙ; ;.;	@;/o;(	;iÙ;	@;);,;"	-mozo;(	;iÙ;	@;);,;"-webkito;-	;iÙ; ;.;	@;/o;(	;iÙ;	@;);,;"-oo;-	;iÙ; ;.;	@;/o;(	;iÙ;	@;);,;"-mso;-	;iÙ; ;.;	@;/o;(	;iÙ;	@;);,;"-khtmlo;(	;iÙ;	@;);,;"official;"experimental;	@;
[ ;${ o;;iÝ;i ;[ ;	@;
[ ;0;"S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */o;;iä;i ;[ ;	@;
[ ;0;"a/* Scale ---------------------------------------------------------------------
 * @doc on */o;;iç;i ;[ ;	@;
[ ;0;"¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iõ;T;[	[o;;"scale_x;"scale-x;	@o;	;iñ;"default_scale_x;"default-scale-x;	@[o;;"scale_y;"scale-y;	@o;	;iò;"scale_x;"scale-x;	@[o;;"perspective;"perspective;	@o;';ió;	@;F[o;;"only3d;"only3d;	@o;';iô;	@;F;"
scale;	@;
[o;;iö;"
trans;0;	@;
[ ;o;#
;iö;[o;	;iö;"scale_x;"scale-x;	@o;	;iö;"scale_y;"scale-y;	@;"
scale;	@;${ u;&[o:Sass::Script::Variable	:
@linei÷:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i÷;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i÷:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i÷:
@args[o; 	;i÷;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i÷;"
trans;"
trans;	@	o;+;iø;[o;	;iø;"
trans;"
trans;	@o;	;iø;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;iû;i ;[ ;	@;
[ ;0;"¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[[o;;"
scale;"
scale;	@o;	;i ;"default_scale_x;"default-scale-x;	@[o;;"perspective;"perspective;	@o;';i;	@;F[o;;"only3d;"only3d;	@o;';i;	@;F;"scaleX;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;	;i;"
scale;"
scale;	@;"scaleX;	@;${ u;&[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	o;+;i;[o;	;i;"
trans;"
trans;	@o;	;i;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;i	;i ;[ ;	@;
[ ;0;"¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[[o;;"
scale;"
scale;	@o;	;i;"default_scale_y;"default-scale-y;	@[o;;"perspective;"perspective;	@o;';i;	@;F[o;;"only3d;"only3d;	@o;';i;	@;F;"scaleY;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;	;i;"
scale;"
scale;	@;"scaleY;	@;${ u;&[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	o;+;i;[o;	;i;"
trans;"
trans;	@o;	;i;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;i;i ;[ ;	@;
[ ;0;"/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[[o;;"
scale;"
scale;	@o;	;i;"default_scale_z;"default-scale-z;	@[o;;"perspective;"perspective;	@o;';i;	@;F;"scaleZ;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;	;i;"
scale;"
scale;	@;"scaleZ;	@;${ u;&[o:Sass::Script::Variable	:
@linei :@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i ;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i :@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i :
@args[o; 	;i ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i ;"
trans;"
trans;	@	o;+;i!;[o;	;i!;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;i$;i ;[ ;	@;
[ ;0;"·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i-;T;[	[o;;"scale_x;"scale-x;	@o;	;i);"default_scale_x;"default-scale-x;	@[o;;"scale_y;"scale-y;	@o;	;i*;"default_scale_y;"default-scale-y;	@[o;;"scale_z;"scale-z;	@o;	;i+;"default_scale_z;"default-scale-z;	@[o;;"perspective;"perspective;	@o;';i,;	@;F;"scale3d;	@;
[o;;i.;"
trans;0;	@;
[ ;o;#
;i.;[o;	;i.;"scale_x;"scale-x;	@o;	;i.;"scale_y;"scale-y;	@o;	;i.;"scale_z;"scale-z;	@;"scale3d;	@;${ u;&[o:Sass::Script::Variable	:
@linei/:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i/;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i/:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i/;"
trans;"
trans;	@	o;+;i0;[o;	;i0;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;i3;i ;[ ;	@;
[ ;0;"m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */o;;i7;i ;[ ;	@;
[ ;0;"ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i@;T;[[o;;"rotate;"rotate;	@o;	;i=;"default_rotate;"default-rotate;	@[o;;"perspective;"perspective;	@o;';i>;	@;F[o;;"only3d;"only3d;	@o;';i?;	@;F;"rotate;	@;
[o;;iA;"
trans;0;	@;
[ ;o;#
;iA;[o;	;iA;"rotate;"rotate;	@;"rotate;	@;${ u;&[o:Sass::Script::Variable	:
@lineiB:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iB;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;iB:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;iB:
@args[o; 	;iB;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iB;"
trans;"
trans;	@	o;+;iC;[o;	;iC;"
trans;"
trans;	@o;	;iC;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;iF;i ;[ ;	@;
[ ;0;"/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iM;T;[[o;;"rotate;"rotate;	@o;	;iJ;"default_rotate;"default-rotate;	@[o;;"perspective;"perspective;	@o;';iK;	@;F[o;;"only3d;"only3d;	@o;';iL;	@;F;"rotateZ;	@;
[o;+;iN;[o;	;iN;"rotate;"rotate;	@o;	;iN;"perspective;"perspective;	@o;	;iN;"only3d;"only3d;	@;"rotate;	@;
[ ;${ o;;iQ;i ;[ ;	@;
[ ;0;"¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iX;T;[[o;;"rotate;"rotate;	@o;	;iV;"default_rotate;"default-rotate;	@[o;;"perspective;"perspective;	@o;';iW;	@;F;"rotateX;	@;
[o;;iY;"
trans;0;	@;
[ ;o;#
;iY;[o;	;iY;"rotate;"rotate;	@;"rotateX;	@;${ u;&[o:Sass::Script::Variable	:
@lineiZ:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iZ;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;iZ:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;iZ:
@args[o; 	;iZ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iZ;"
trans;"
trans;	@	o;+;i[;[o;	;i[;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;i^;i ;[ ;	@;
[ ;0;"§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;ie;T;[[o;;"rotate;"rotate;	@o;	;ic;"default_rotate;"default-rotate;	@[o;;"perspective;"perspective;	@o;';id;	@;F;"rotateY;	@;
[o;;if;"
trans;0;	@;
[ ;o;#
;if;[o;	;if;"rotate;"rotate;	@;"rotateY;	@;${ u;&[o:Sass::Script::Variable	:
@lineig:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;ig;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;ig:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;ig:
@args[o; 	;ig;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;ig;"
trans;"
trans;	@	o;+;ih;[o;	;ih;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;ik;i ;[ ;	@;
[ ;0;"¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;ix;T;[
[o;;"vector_x;"vector-x;	@o;	;is;"default_vector_x;"default-vector-x;	@[o;;"vector_y;"vector-y;	@o;	;it;"default_vector_y;"default-vector-y;	@[o;;"vector_z;"vector-z;	@o;	;iu;"default_vector_z;"default-vector-z;	@[o;;"rotate;"rotate;	@o;	;iv;"default_rotate;"default-rotate;	@[o;;"perspective;"perspective;	@o;';iw;	@;F;"rotate3d;	@;
[o;;iy;"
trans;0;	@;
[ ;o;#
;iy;[	o;	;iy;"vector_x;"vector-x;	@o;	;iy;"vector_y;"vector-y;	@o;	;iy;"vector_z;"vector-z;	@o;	;iy;"rotate;"rotate;	@;"rotate3d;	@;${ u;&[o:Sass::Script::Variable	:
@lineiz:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iz;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;iz:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;iz:
@args[o; 	;iz;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iz;"
trans;"
trans;	@	o;+;i{;[o;	;i{;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;i~;i ;[ ;	@;
[ ;0;"m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */o;;i;i ;[ ;	@;
[ ;0;"5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[	[o;;"translate_x;"translate-x;	@o;	;i;"default_translate_x;"default-translate-x;	@[o;;"translate_y;"translate-y;	@o;	;i;"default_translate_y;"default-translate-y;	@[o;;"perspective;"perspective;	@o;';i;	@;F[o;;"only3d;"only3d;	@o;';i;	@;F;"translate;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;	;i;"translate_x;"translate-x;	@o;	;i;"translate_y;"translate-y;	@;"translate;	@;${ u;&[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	o;+;i;[o;	;i;"
trans;"
trans;	@o;	;i;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;i;i ;[ ;	@;
[ ;0;"³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[[o;;"trans_x;"trans-x;	@o;	;i;"default_translate_x;"default-translate-x;	@[o;;"perspective;"perspective;	@o;';i;	@;F[o;;"only3d;"only3d;	@o;';i;	@;F;"translateX;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;	;i;"trans_x;"trans-x;	@;"translateX;	@;${ u;&[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	o;+;i;[o;	;i;"
trans;"
trans;	@o;	;i;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;i ;i ;[ ;	@;
[ ;0;"³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i¨;T;[[o;;"trans_y;"trans-y;	@o;	;i¥;"default_translate_y;"default-translate-y;	@[o;;"perspective;"perspective;	@o;';i¦;	@;F[o;;"only3d;"only3d;	@o;';i§;	@;F;"translateY;	@;
[o;;i©;"
trans;0;	@;
[ ;o;#
;i©;[o;	;i©;"trans_y;"trans-y;	@;"translateY;	@;${ u;&[o:Sass::Script::Variable	:
@lineiª:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iª;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;iª:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;iª:
@args[o; 	;iª;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iª;"
trans;"
trans;	@	o;+;i«;[o;	;i«;"
trans;"
trans;	@o;	;i«;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;i®;i ;[ ;	@;
[ ;0;"ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iµ;T;[[o;;"trans_z;"trans-z;	@o;	;i³;"default_translate_z;"default-translate-z;	@[o;;"perspective;"perspective;	@o;';i´;	@;F;"translateZ;	@;
[o;;i¶;"
trans;0;	@;
[ ;o;#
;i¶;[o;	;i¶;"trans_z;"trans-z;	@;"translateZ;	@;${ u;&[o:Sass::Script::Variable	:
@linei·:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i·;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i·:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;i·:
@args[o; 	;i·;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i·;"
trans;"
trans;	@	o;+;i¸;[o;	;i¸;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;i»;i ;[ ;	@;
[ ;0;"Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iÄ;T;[	[o;;"translate_x;"translate-x;	@o;	;iÀ;"default_translate_x;"default-translate-x;	@[o;;"translate_y;"translate-y;	@o;	;iÁ;"default_translate_y;"default-translate-y;	@[o;;"translate_z;"translate-z;	@o;	;iÂ;"default_translate_z;"default-translate-z;	@[o;;"perspective;"perspective;	@o;';iÃ;	@;F;"translate3d;	@;
[o;;iÅ;"
trans;0;	@;
[ ;o;#
;iÅ;[o;	;iÅ;"translate_x;"translate-x;	@o;	;iÅ;"translate_y;"translate-y;	@o;	;iÅ;"translate_z;"translate-z;	@;"translate3d;	@;${ u;&[o:Sass::Script::Variable	:
@lineiÆ:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iÆ;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;iÆ:@separator:
space;	@	:@value[o:Sass::Script::Funcall
;iÆ:
@args[o; 	;iÆ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iÆ;"
trans;"
trans;	@	o;+;iÇ;[o;	;iÇ;"
trans;"
trans;	@;"transform3d;	@;
[ ;${ o;;iÊ;i ;[ ;	@;
[ ;0;"m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */o;;iÎ;i ;[ ;	@;
[ ;0;"ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iÙ;T;[[o;;"skew_x;"skew-x;	@o;	;iÖ;"default_skew_x;"default-skew-x;	@[o;;"skew_y;"skew-y;	@o;	;i×;"default_skew_y;"default-skew-y;	@[o;;"only3d;"only3d;	@o;';iØ;	@;F;"	skew;	@;
[o;;iÚ;"
trans;0;	@;
[ ;o;#
;iÚ;[o;	;iÚ;"skew_x;"skew-x;	@o;	;iÚ;"skew_y;"skew-y;	@;"	skew;	@;${ o;+;iÛ;[o;	;iÛ;"
trans;"
trans;	@o;	;iÛ;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;iÞ;i ;[ ;	@;
[ ;0;"/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;iæ;T;[[o;;"skew_x;"skew-x;	@o;	;iä;"default_skew_x;"default-skew-x;	@[o;;"only3d;"only3d;	@o;';iå;	@;F;"
skewX;	@;
[o;;iç;"
trans;0;	@;
[ ;o;#
;iç;[o;	;iç;"skew_x;"skew-x;	@;"
skewX;	@;${ o;+;iè;[o;	;iè;"
trans;"
trans;	@o;	;iè;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;ië;i ;[ ;	@;
[ ;0;"/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;ió;T;[[o;;"skew_y;"skew-y;	@o;	;iñ;"default_skew_y;"default-skew-y;	@[o;;"only3d;"only3d;	@o;';iò;	@;F;"
skewY;	@;
[o;;iô;"
trans;0;	@;
[ ;o;#
;iô;[o;	;iô;"skew_y;"skew-y;	@;"
skewY;	@;${ o;+;iõ;[o;	;iõ;"
trans;"
trans;	@o;	;iõ;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;;iù;i ;[ ;	@;
[ ;0;"/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;i;T;[[o;;"perspective;"perspective;	@o;';i;	@;F[o;;"scale_x;"scale-x;	@o;';i;	@;F[o;;"scale_y;"scale-y;	@o;';i;	@;F[o;;"scale_z;"scale-z;	@o;';i;	@;F[o;;"rotate_x;"rotate-x;	@o;';i;	@;F[o;;"rotate_y;"rotate-y;	@o;';i;	@;F[o;;"rotate_z;"rotate-z;	@o;';i	;	@;F[o;;"rotate3d;"rotate3d;	@o;';i
;	@;F[o;;"trans_x;"trans-x;	@o;';i;	@;F[o;;"trans_y;"trans-y;	@o;';i;	@;F[o;;"trans_z;"trans-z;	@o;';i;	@;F[o;;"skew_x;"skew-x;	@o;';i;	@;F[o;;"skew_y;"skew-y;	@o;';i;	@;F[o;;"origin_x;"origin-x;	@o;';i;	@;F[o;;"origin_y;"origin-y;	@o;';i;	@;F[o;;"origin_z;"origin-z;	@o;';i;	@;F[o;;"only3d;"only3d;	@o;';i;	@;F;"create-transform;	@;
[o;;i;"
trans;0;	@;
[ ;o;#
;i;[o;(	;i;	@;);*;" ;"unquote;	@;${ o;;i;i ;[ ;	@;
[ ;0;"/* perspective */u;&.[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:
@name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o;;i;i ;[ ;	@;
[ ;0;"/* scale */u;&Ê[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	;i:@underscored_name"scale_y:
@name"scale-y:@options{ :@operator:and:@operand1o;	;i;	"scale_x;
"scale-x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_x:
@name"scale-x:@options{ 0[o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale_x;"scale-x;	@	;"scaleX;	@	:@keywords{ u; v[o:Sass::Script::Variable	:
@linei :@underscored_name"scale_y:
@name"scale-y:@options{ 0[o:Sass::Tree::VariableNode;i ;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i :@separator:
space;	@	:@value[o; 	;i ;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i :
@args[o; 	;i ;"scale_y;"scale-y;	@	;"scaleY;	@	:@keywords{ u; v[o:Sass::Script::Variable	:
@linei!:@underscored_name"scale_z:
@name"scale-z:@options{ 0[o:Sass::Tree::VariableNode;i!;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i!:@separator:
space;	@	:@value[o; 	;i!;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i!:
@args[o; 	;i!;"scale_z;"scale-z;	@	;"scaleZ;	@	:@keywords{ [u;L[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_z:
@name"scale-z:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@linei:
@name"
trans:@guarded0:@options{ :@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o:Sass::Script::Variable	;i:@underscored_name"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:
@args[o;	;i;"scale_x;"scale-x;	@	o;	;i;"scale_y;"scale-y;	@	;"
scale;	@	:@keywords{ [o:Sass::Tree::VariableNode;i;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i:@separator:
space;	@	:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale_x;"scale-x;	@	o; 	;i;"scale_y;"scale-y;	@	o; 	;i;"scale_z;"scale-z;	@	;"scale3d;	@	:@keywords{ o;;i$;i ;[ ;	@;
[ ;0;"/* rotate */u;&{[o:Sass::Script::Variable	:
@linei%:@underscored_name"rotate_x:
@name"rotate-x:@options{ 0[o:Sass::Tree::VariableNode;i%;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i%:@separator:
space;	@	:@value[o; 	;i%;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i%:
@args[o; 	;i%;"rotate_x;"rotate-x;	@	;"rotateX;	@	:@keywords{ u;&{[o:Sass::Script::Variable	:
@linei&:@underscored_name"rotate_y:
@name"rotate-y:@options{ 0[o:Sass::Tree::VariableNode;i&;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i&:@separator:
space;	@	:@value[o; 	;i&;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i&:
@args[o; 	;i&;"rotate_y;"rotate-y;	@	;"rotateY;	@	:@keywords{ u;&{[o:Sass::Script::Variable	:
@linei':@underscored_name"rotate_z:
@name"rotate-z:@options{ 0[o:Sass::Tree::VariableNode;i';"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i':@separator:
space;	@	:@value[o; 	;i';"
trans;"
trans;	@	o:Sass::Script::Funcall
;i':
@args[o; 	;i';"rotate_z;"rotate-z;	@	;"rotateZ;	@	:@keywords{ u;&|[o:Sass::Script::Variable	:
@linei(:@underscored_name"rotate3d:
@name"rotate3d:@options{ 0[o:Sass::Tree::VariableNode;i(;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i(:@separator:
space;	@	:@value[o; 	;i(;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i(:
@args[o; 	;i(;"rotate3d;"rotate3d;	@	;"rotate3d;	@	:@keywords{ o;;i*;i ;[ ;	@;
[ ;0;"/* translate */u;&Þ[o:Sass::Script::Operation
:
@linei+:@operand2o:Sass::Script::Variable	;i+:@underscored_name"trans_y:
@name"trans-y:@options{ :@operator:and:@operand1o;	;i+;	"trans_x;
"trans-x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@linei/:@underscored_name"trans_x:
@name"trans-x:@options{ 0[o:Sass::Tree::VariableNode;i/;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i/:@separator:
space;	@	:@value[o; 	;i/;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"trans_x;"trans-x;	@	;"translateX;	@	:@keywords{ u; z[o:Sass::Script::Variable	:
@linei0:@underscored_name"trans_y:
@name"trans-y:@options{ 0[o:Sass::Tree::VariableNode;i0;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i0:@separator:
space;	@	:@value[o; 	;i0;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i0:
@args[o; 	;i0;"trans_y;"trans-y;	@	;"translateY;	@	:@keywords{ u; z[o:Sass::Script::Variable	:
@linei1:@underscored_name"trans_z:
@name"trans-z:@options{ 0[o:Sass::Tree::VariableNode;i1;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i1:@separator:
space;	@	:@value[o; 	;i1;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i1:
@args[o; 	;i1;"trans_z;"trans-z;	@	;"translateZ;	@	:@keywords{ [u;T[o:Sass::Script::Variable	:
@linei,:@underscored_name"trans_z:
@name"trans-z:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@linei-:
@name"
trans:@guarded0:@options{ :@children[ :
@expro:Sass::Script::List	;i-:@separator:
space;	@	:@value[o:Sass::Script::Variable	;i-:@underscored_name"
trans;"
trans;	@	o:Sass::Script::Funcall
;i-:
@args[o;	;i-;"trans_x;"trans-x;	@	o;	;i-;"trans_y;"trans-y;	@	;"translate;	@	:@keywords{ [o:Sass::Tree::VariableNode;i,;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i,:@separator:
space;	@	:@value[o; 	;i,;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i,:
@args[o; 	;i,;"trans_x;"trans-x;	@	o; 	;i,;"trans_y;"trans-y;	@	o; 	;i,;"trans_z;"trans-z;	@	;"translate3d;	@	:@keywords{ o;;i4;i ;[ ;	@;
[ ;0;"/* skew */u;&[o:Sass::Script::Operation
:
@linei5:@operand2o:Sass::Script::Variable	;i5:@underscored_name"skew_y:
@name"skew-y:@options{ :@operator:and:@operand1o;	;i5;	"skew_x;
"skew-x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@linei7:@underscored_name"skew_x:
@name"skew-x:@options{ 0[o:Sass::Tree::VariableNode;i7;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i7:@separator:
space;	@	:@value[o; 	;i7;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i7:
@args[o; 	;i7;"skew_x;"skew-x;	@	;"
skewX;	@	:@keywords{ u; q[o:Sass::Script::Variable	:
@linei8:@underscored_name"skew_y:
@name"skew-y:@options{ 0[o:Sass::Tree::VariableNode;i8;"
trans:@guarded0;	@	:@children[ :
@expro:Sass::Script::List	;i8:@separator:
space;	@	:@value[o; 	;i8;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i8:
@args[o; 	;i8;"skew_y;"skew-y;	@	;"
skewY;	@	:@keywords{ [o:Sass::Tree::VariableNode;i5;
"
trans:@guarded0;@
:@children[ :
@expro:Sass::Script::List	;i5:@separator:
space;@
:@value[o;	;i5;	"
trans;
"
trans;@
o:Sass::Script::Funcall
;i5:
@args[o;	;i5;	"skew_x;
"skew-x;@
o;	;i5;	"skew_y;
"skew-y;@
;
"	skew;@
:@keywords{ o;;i;;i ;[ ;	@;
[ ;0;"/* apply it! */o;+;i<;[o;	;i<;"
trans;"
trans;	@o;	;i<;"only3d;"only3d;	@;"transform;	@;
[ ;${ o;+;i=;[	o;	;i=;"origin_x;"origin-x;	@o;	;i=;"origin_y;"origin-y;	@o;	;i=;"origin_z;"origin-z;	@o;	;i=;"only3d;"only3d;	@;"transform-origin;	@;
[ ;${ o;;iA;i ;[ ;	@;
[ ;0;"q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */o;;iL;T;[[o;;"
scale;"
scale;	@o;';iD;	@;F[o;;"rotate;"rotate;	@o;';iE;	@;F[o;;"trans_x;"trans-x;	@o;';iF;	@;F[o;;"trans_y;"trans-y;	@o;';iG;	@;F[o;;"skew_x;"skew-x;	@o;';iH;	@;F[o;;"skew_y;"skew-y;	@o;';iI;	@;F[o;;"origin_x;"origin-x;	@o;';iJ;	@;F[o;;"origin_y;"origin-y;	@o;';iK;	@;F;"simple-transform;	@;
[o;+;iU;[o;';iN;	@;Fo;	;iO;"
scale;"
scale;	@o;	;iO;"
scale;"
scale;	@o;';iO;	@;Fo;';iP;	@;Fo;';iP;	@;Fo;	;iP;"rotate;"rotate;	@o;';iP;	@;Fo;	;iQ;"trans_x;"trans-x;	@o;	;iQ;"trans_y;"trans-y;	@o;';iQ;	@;Fo;	;iR;"skew_x;"skew-x;	@o;	;iR;"skew_y;"skew-y;	@o;	;iS;"origin_x;"origin-x;	@o;	;iS;"origin_y;"origin-y;	@o;';iS;	@;Fo;';iT;	@;F;"create-transform;	@;
[ ;${ 